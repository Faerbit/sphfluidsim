#version 430

layout(local_size_x = $THREAD_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer Neighbours {
    int neigh[];
} neighbours;

layout(std430, binding = 1) buffer SortPositions {
    vec4 spos[];
} sortPositions;

layout(std430, binding = 2) buffer SortVelocities {
    vec4 svel[];
} sortVelocities;

layout(std430, binding = 3) buffer DensityPressure {
    vec2 dp[];
} densityPressure;

layout(std430, binding = 4) buffer Positions {
    vec4 pos[];
} positions;

layout(std430, binding = 5) buffer Velocities {
    vec4 vel[];
} velocities;

// hacky work around because apparently simple uniforms are a thing of the
// devil
// data[0] = timeStep
// data[1] = randomNumber
layout(std430, binding = 6) buffer Data{
    float data[];
} data;

uniform int work_items;

const int max_no_interact_particles = $MAX_NO_INTERACT_PARTICLES;

const float domain_size_x = $DOMAIN_SIZE_X;
const float domain_size_y = $DOMAIN_SIZE_Y;
const float domain_size_z = $DOMAIN_SIZE_Z;

const float interaction_radius = $INTERACTION_RADIUS;
const float particle_mass = $PARTICLE_MASS;
const float dynamic_viscosity = $DYNAMIC_VISCOSITY;
const float resting_density = $RESTING_DENSITY;
const float kinematic_viscosity = dynamic_viscosity/resting_density;
const float gravity_value = $GRAVITY;

const float PI = 3.14159265359;

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id <= work_items) {
        vec3 self_pos = vec3(sortPositions.spos[id]);

        int found_neighbour_parts = neighbours.neigh[
            id * (max_no_interact_particles + 1) + max_no_interact_particles];

        // physics formula from
        // "Smoothed Particle Hydrodynamics" OpenCL Programming Webinar Series
        // by AMD (November 29, 2019) Slide 14

        // condenses equations
        float h = interaction_radius;

        // compute pressure gradient
        float self_density = densityPressure.dp[id].x;
        float self_pressure = densityPressure.dp[id].y;

        vec3 pressure_gradient = vec3(0.0);
        for(int i = 0; i<found_neighbour_parts; i++) {
            int neighbour = neighbours.neigh[
                id * (max_no_interact_particles + 1) + i];
            vec3 pos = vec3(sortPositions.spos[neighbour]);
            float density = densityPressure.dp[neighbour].x;
            float pressure = densityPressure.dp[neighbour].y;
            pressure_gradient += particle_mass
                * ((self_pressure/pow(self_density, 2)) + 
                    (pressure/pow(density, 2)))
                * (-45.0/(PI*pow(h, 6)))*pow(h-distance(self_pos, pos), 2)
                * ((self_pos - pos)/(distance(self_pos, pos)));
        }

        // apply boundary conditions
        /*float a = 2.0;
        float b = 2.0;
        // boundary function: f(x) = a*exp(-bx)
        float distance_to_x_min = self_pos.x - 0.0;
        float distance_to_x_max = domain_size_x - self_pos.x;

        pressure_gradient.x += a * exp(-b*distance_to_x_min);
        pressure_gradient.x -= a * exp(-b*distance_to_x_max);

        float distance_to_y_min = self_pos.y - 0.0;
        float distance_to_y_max = domain_size_y - self_pos.y;

        pressure_gradient.y += a * exp(-b*distance_to_y_min);
        pressure_gradient.y -= a * exp(-b*distance_to_y_max);

        float distance_to_z_min = self_pos.z - 0.0;
        float distance_to_z_max = domain_size_z - self_pos.z;

        pressure_gradient.z += a * exp(-b*distance_to_z_min);
        pressure_gradient.z -= a * exp(-b*distance_to_z_max);*/

        // compute viscosity term
        vec3 self_velocity = vec3(sortVelocities.svel[id]);
        vec3 viscosity_gradient = vec3(0.0);
        for(int i = 0; i<found_neighbour_parts; i++) {
            int neighbour = neighbours.neigh[
                id * (max_no_interact_particles + 1) + i];
            vec3 pos = vec3(sortPositions.spos[neighbour]);
            float density = densityPressure.dp[neighbour].x;
            //vec3 velocity = vec3(sortVelocities.svel[neighbour]);
            vec3 velocity = vec3 (1.0, 2.0, 1.0);
            viscosity_gradient += particle_mass
                * ((velocity - self_velocity)/density) 
                * (45.0/(PI*pow(h, 6)))
                * (h - distance(pos, self_pos));
        }
        viscosity_gradient *= kinematic_viscosity/self_density;

        // compute acceleration
        vec3 gravity = vec3(0.0, -gravity_value, 0.0);
        vec3 acceleration = gravity - pressure_gradient + viscosity_gradient;
        float time_step = data.data[0];
        vec3 res_velocity = self_velocity + time_step * acceleration;
        vec3 res_pos = self_pos + time_step * res_velocity;
        velocities.vel[id] = vec4(res_velocity, 0.0);

        // apply boundary conditions
        res_pos.x = max(0.0, res_pos.x);
        res_pos.x = min(domain_size_x, res_pos.x);
        res_pos.y = max(0.0, res_pos.y);
        res_pos.y = min(domain_size_y, res_pos.y);
        res_pos.z = max(0.0, res_pos.z);
        res_pos.z = min(domain_size_z, res_pos.z);
        positions.pos[id] = vec4(res_pos, 0.0);
    }
}
