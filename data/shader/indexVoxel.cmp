#version 430

layout(local_size_x = $THREAD_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer VoxelIndex {
    ivec2 ind[];
} voxelIndex;

layout(std430, binding = 1) buffer PartIndex {
    ivec2 partInd[];
} partIndex;


uniform int work_items;

void main() {
    uint _id = gl_GlobalInvocationID.x;
    int id = int(_id);
    if (id <= work_items) {
        int first = 0;
        int last = partIndex.partInd.length();
        int result = -1;
        int search_end = int(ceil(log(partIndex.partInd.length())/log(2)));
        // binary search for particle with current voxel id
        for(int i = 0; i<search_end; i++) {
            int cur = int(floor((last-first)/2)) + first;
            if (partIndex.partInd[cur].x == id) {
                result = cur;
                break;
            }
            if (partIndex.partInd[cur].x < id) {
                first = cur;
            }
            else {
                last = cur;
            }
        }
        int end = -1;
        if (result > -1) {
            // search end of voxel
            end = result;
            while(true) {
                if (partIndex.partInd[end+1].x == id
                        && end < partIndex.partInd.length() -1) {
                    end++;
                }
                else {
                    break;
                }
            }

            // search lowest particle id with current voxel id
            while(true) {
                if (partIndex.partInd[result-1].x == id && result > 0) {
                    result--;
                }
                else {
                    break;
                }
            }
        }
        voxelIndex.ind[id] = ivec2(result, end);
    }
}
