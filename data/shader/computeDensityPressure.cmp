#version 430

layout(local_size_x = $THREAD_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer Neighbours {
    int neigh[];
} neighbours;

layout(std430, binding = 1) buffer SortPositions {
    vec4 spos[];
} sortPositions;

layout(std430, binding = 2) buffer DensityPressure {
    vec2 dp[];
} densityPressure;

uniform int work_items;

const int max_no_interact_particles = $MAX_NO_INTERACT_PARTICLES;

const float interaction_radius = $INTERACTION_RADIUS;
const float particle_mass = $PARTICLE_MASS;
const float resting_density = $RESTING_DENSITY;
const float pressure_factor = $PRESSURE_FACTOR;

const float PI = 3.14159265359;

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id <= work_items) {
        vec4 self_pos = sortPositions.spos[id];

        int found_neighbour_parts = neighbours.neigh[
            id * (max_no_interact_particles + 1) + max_no_interact_particles];

        // physics formula from
        // "Smoothed Particle Hydrodynamics" OpenCL Programming Webinar Series
        // by AMD (November 29, 2019) Slide 14

        // condenses equations
        float h = interaction_radius;

        // compute density
        float density = 0.0;
        for(int i = 0; i<found_neighbour_parts; i++) {
            int neighbour = neighbours.neigh[
                id * (max_no_interact_particles + 1) + i];
            float _distance = distance(self_pos, sortPositions.spos[neighbour]);
            density += particle_mass * (315/(64*PI* pow(h, 9)))
                * pow(pow(h, 2) - pow(_distance, 2), 3);
        }

        // compute pressure
        float pressure = 0.1* (density - pressure_factor * resting_density);

        densityPressure.dp[id] = vec2(density, pressure);
    }
}
